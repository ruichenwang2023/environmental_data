---
title: "Final Project: R Reference Guide"
author: "Ruichen Wang"
date: "`r Sys.Date()`"
output: html_document

---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# R Reference Guide {.tabset .tabset-pills}
Some shortcut run the code in a cell: Ctrl + Enter 

Type "?" and then the function you need help in Console window provides explanation of the function.

## Loading Data and Packages
To load packages, we can use **library()** or **require()** functions. They do similar operations so either one is fine.
```{r}
# load the here and palmerpenguins packages using library()
library(here)
library(palmerpenguins)

# load the here and palmerpenguins packages using require()
require(here)
require(palmerpenguins)
```

To load data from local dirctories, we can use **read.csv()** or **here()** functions. here() function locate to working directory and 
```{r}
here()

# create a data frame using here() and read.csv
ginkgo = read.csv(here("data", "ginkgo_data_2022.csv"))
ginkgo
```


## Data Structures
The function **c()** combines or concatenates its arguments into a vector (a 1-dimensional data structure consisting of 1 or more elements).

All of the elements must be of the same type.
I can’t combine character and numeric types in the same call to c()
Here’s two examples using numeric and character data types:
```{r}
## Create a vector of numbers:
num_vec  = c(1, 4, 8, 9, 13)

## Create a vector of characters:
char_vec = c("a", "fish", "data is cool")
```

I can show the contents of a vector by typing the name of the vector, or using the print() function.
```{r}
## Typing the name of the vector into the console prints the contents
num_vec
```
```{r}
## The print() function accomplishes the same task:
print(char_vec)
```
If I want to check the length of a vector, I can use **lengh()** function
```{r}
length(num_vec)
length(char_vec)
```

**matrix()** function collects elements of the same data type (numeric, character, or logical) and arranges into a fixed number of rows and columns.
```{r}
#making a vector that contains integers from 1 to 12
Vec_4 = c(1:12)
#matrix cab be filled by rows
mat_1 = matrix(Vec_4, nrow = 3, byrow = TRUE)
mat_1

#by defalt, the matrix is filled by columns.
mat_2 = matrix(Vec_4, nrow = 3)
mat_2
```
Data frames contain the variables of columns and rows that differ in data types.
```{r}
data.frame(ginkgo)
```
**nrow()** and **ncol()** return the number of rows and columns of a data frame. **dim()** return the dimention of the data frame. 
```{r}
nrow(ginkgo) 
ncol(ginkgo)
dim(ginkgo)
```


## Subsetting
One subset can be selected in a data frame by name using **$**. 
```{r}
ginkgo$max_width
```
I can use **[]** to select a subset by provide the position of the value I want.
```{r}
#select the first row in ginkgo data frame
ginkgo[1,]
#select the value at row 2, column 3
ginkgo[2,3]
#select the thrid column
ginkgo[3]
```

I can use subset() to filter out all the data that belongs to this subset in a column. For example. retrieve all the data for Adelie penguins:
```{r}
subset(penguins, species == "Adelie")
```


## Numerical Data Exploration
Once I load a data frame, I can explore it and have an overview of my data. It is helpful to have a sense of data before doing any analysis. Below are functions that is very useful in numerical data exploration.
```{r}
#summary of ginkgo data frame
summary(ginkgo)
```
I can also see the summary, mean, and standard deviation of a specific column
```{r}
summary(ginkgo$max_width)
mean(ginkgo$max_width)
sd(ginkgo$max_width)
```


## Graphical Data Exploration
Explore the data graphically could be more direct than numerical exploration. Scatter plot, histogram, and boxplot are commonly used in graphical data exploration.
Below is a scatter plot of max leaf depth and max leaf width from ginkgo data frame.
```{r}
plot(ginkgo$max_depth, ginkgo$max_width,
     col = "yellow",
     pch = 2,
     cex = 0.7,
     main = "maximum leaf depth vs. maximum leaf width in gonkgo leaves",
     xlab = "max ginkgo depth",
     ylab = "max ginkgo width",
     xlim = c(20, 95),
     ylim = c(20, 125))
```

A histogram of penguin flipper lengths:
```{r}
hist(penguins$flipper_length_mm,
     main = "Histogram of Penguin's Flipper Length",
     xlab = "Flipper length (mm)",
     breaks = 15)
```

Simple boxplot of ginkgo petiole lengths
```{r}
boxplot(ginkgo$petiole_length,
        main = "ginkgo petiole lengths",
        ylab = "petiole length (mm)")
```

Conditional boxplot
```{r}
boxplot(ginkgo$max_width ~ ginkgo$seeds_present,
        main = "ginkgo maximum width vs seed precence",
        xlab = "seeds present",
        ylab = "maximum width (mm)")
```



By using **par()** with the argument **mfrow**, I can create multiple plots arranged into a grid. 
```{r}
par(mfrow = c(2,2))
hist(ginkgo$max_width, main = "ginkgo max width", xlab = "max width (mm)")
hist(ginkgo$max_depth, main = "ginkgo max depth", xlab = "max depth (mm)")
hist(ginkgo$notch_depth, main = "ginkgo notch depth", xlab = "notch depth (mm)")
hist(ginkgo$petiole_length, main = "ginkgo petiole length", xlab = "petiole length (mm)")
```



## Distribution Functions
The d functions calculate the probability density of a single event (what is probability of x = 3).

The p functions calculate the cumulative density of a single event (what is probability of x = 3 or less).

The q functions calculate the quantile function of a single event (what is the 90th percentile)

Normal distributions are used for continuous variables, the input parameters are mean and standard deviation of the sample. 

Binomial distributions are used for discrete variables, the input parameters are number of trials in integer and probability of success on each trial.
```{r}
dnorm(3, mean = 10, sd = 3)
pnorm(3, mean = 10, sd = 3)
qnorm(0.9, mean = 10, sd = 3)

```
```{r}
dbinom(3, size = 10, prob = 0.3)
pbinom(3, size = 10, prob = 0.3)
qbinom(0.9, size = 10, prob = 0.3)
```

